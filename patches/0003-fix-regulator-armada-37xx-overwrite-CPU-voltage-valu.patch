From 0bb9aab4c7706139a8d18f67a07c462fcfcf7327 Mon Sep 17 00:00:00 2001
From: Victor Gu <xigu@marvell.com>
Date: Wed, 20 Sep 2017 10:00:49 +0800
Subject: [PATCH 3/8] fix: regulator: armada-37xx: overwrite CPU voltage values
 in 1000MHZ

The original CPU voltage values from load 1 to load 3 are too low for
EspressoBin board with Armada-37xx SoC when CPU is 1000MHZ, which leads
to instability that CPU gets stuck soon during dynamic voltage scaling.
In order to fix this issue, this patch adds the compatible string for
EspressoBin AVS, and update the CPU voltage values from load 1 to load 3
in 1000MHZ mode accordingly, the value is updated from original 1.05v
to 1.108v.

Change-Id: Iae22cb3bb243b3345e7426e859313139637f09e7
Signed-off-by: Victor Gu <xigu@marvell.com>
---
 .../devicetree/bindings/regulator/armada3700-regulator.txt       | 2 +-
 drivers/regulator/armada-37xx-regulator.c                        | 9 +++++++++
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/Documentation/devicetree/bindings/regulator/armada3700-regulator.txt b/Documentation/devicetree/bindings/regulator/armada3700-regulator.txt
index 7ed7a61..5a853dd 100644
--- a/Documentation/devicetree/bindings/regulator/armada3700-regulator.txt
+++ b/Documentation/devicetree/bindings/regulator/armada3700-regulator.txt
@@ -1,7 +1,7 @@
 Marvell Armada 3700 voltage regulator by AVS
 
 Required properties:
-- compatible: must be "marvell,armada-3700-avs"
+- compatible: must be "marvell,armada-3700-avs" or "marvell,armada-3700-espressobin-avs"
 - reg: avs register address, which is used to control CPU voltage
 - clocks: CPU core clock to get the MAX CPU frequency
 - any required generic properties defined in regulator.txt
diff --git a/drivers/regulator/armada-37xx-regulator.c b/drivers/regulator/armada-37xx-regulator.c
index bd3b950..1185f6a 100644
--- a/drivers/regulator/armada-37xx-regulator.c
+++ b/drivers/regulator/armada-37xx-regulator.c
@@ -274,6 +274,7 @@ static int armada_3700_avs_probe(struct platform_device *pdev)
 	struct regulator_config config = { };
 	struct regulator_dev *rdev;
 	u32 max_cpu_freq;
+	int idx;
 
 	avs = devm_kzalloc(&pdev->dev, sizeof(*avs), GFP_KERNEL);
 	if (!avs) {
@@ -315,6 +316,13 @@ static int armada_3700_avs_probe(struct platform_device *pdev)
 		avs->freq_level = CPU_FREQ_LEVEL_800MHZ;
 	} else if (max_cpu_freq == CPU_FREQ_1000MHZ) {
 		avs->freq_level = CPU_FREQ_LEVEL_1000MHZ;
+		/*
+		 * Overwrite the VDD values from load 1 to load 3 in 1000MHZ
+		 * for EspressoBin, otherwize the CPU gets stuck.
+		 */
+		if (of_device_is_compatible(np, "marvell,armada-3700-espressobin-avs"))
+			for (idx = VDD_SET1; idx <= VDD_SET3; idx++)
+				voltage_m_tbl[avs->freq_level][idx] = 1108;
 	} else if (max_cpu_freq == CPU_FREQ_1200MHZ) {
 		avs->freq_level = CPU_FREQ_LEVEL_1200MHZ;
 	} else {
@@ -399,6 +407,7 @@ static const struct dev_pm_ops armada_3700_avs_pm_ops = {
 
 static const struct of_device_id armada3700_avs_of_match[] = {
 	{ .compatible = "marvell,armada-3700-avs", },
+	{ .compatible = "marvell,armada-3700-espressobin-avs", },
 	{}
 };
 
-- 
1.9.1

